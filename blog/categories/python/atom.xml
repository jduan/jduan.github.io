<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Furious Programming]]></title>
  <link href="http://jduan.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://jduan.github.io/"/>
  <updated>2015-01-03T23:59:25-08:00</updated>
  <id>http://jduan.github.io/</id>
  <author>
    <name><![CDATA[Jingjing Duan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Closures in Python]]></title>
    <link href="http://jduan.github.io/blog/2015/01/03/closures-in-python/"/>
    <updated>2015-01-03T23:05:52-08:00</updated>
    <id>http://jduan.github.io/blog/2015/01/03/closures-in-python</id>
    <content type="html"><![CDATA[<p>Functional languages have a concept of closure, which is a function that closes
its enclosing environment. In other words, a function can access not only its
local variables, but also the non-local variables (aka free variables) of its
enclosing functions.</p>

<p>Python has support for closures but has its weakness and tweaks.</p>

<!-- more -->


<h2>Functions are lexically scoped</h2>

<p>An exmaple shows how lexical scope works.</p>

<p>``` python
def outer():
  name = &lsquo;John&rsquo;
  def inner():</p>

<pre><code>print('name is %s' % name)
</code></pre>

<p>  inner()</p>

<h1>invoke outer</h1>

<p>outer()
```</p>

<p>The code should print &ldquo;name is John&rdquo;. The inner function can &ldquo;access&rdquo; the free
variable &ldquo;name&rdquo; defined in the outer function.</p>

<h2>Closures in Python are weak</h2>

<p>You can only &ldquo;read&rdquo; free variables but you can&rsquo;t &ldquo;change&rdquo; them. For example:</p>

<p>``` python
def make_counter():
  x = 0;
  def counter():</p>

<pre><code>x += 1 ##Error, x not defined
print x
</code></pre>

<p>  return counter</p>

<p>count = make_counter();
count()
```</p>

<p>You will see an error of &ldquo;UnboundLocalError: local variable &lsquo;x&rsquo; referenced
before assignment&rdquo;. This is allowed in languages like Javascript.</p>

<p>There is a workaround though. You can use an object instead of a primitive if
you want to &ldquo;change&rdquo; free variables.</p>

<p>``` python
def make_counter():
  x = {&lsquo;count&rsquo;: 0}
  def counter():</p>

<pre><code>x['count'] += 1
print x['count']
</code></pre>

<p>  return counter</p>

<p>count = make_counter();
count()
```
The code above should work without any compilation errors. It doesn&rsquo;t look
pretty though.</p>

<p>The good news is Python 3 has better support for this. You can use the
&ldquo;non-local&rdquo; keyword to tag a variable. That way you can change it.</p>

<p>``` python
def make_counter():
  x = 0;
  def counter():</p>

<pre><code># this works only in Python 3
nonlocal x
x += 1
print(x)
</code></pre>

<p>  return counter</p>

<p>count = make_counter();
count()
```</p>

<h2>What is a lambda?</h2>

<p>In functional languages, lambdas are like synonym of closures. However, in
python lambdas specifically mean &ldquo;anonymous functions&rdquo;. Anything you can do with
a lambda can be done with a function. Lambdas are easier to use when working
with higher-order functions.</p>

<p>Lambdas are like functions but with limitations:</p>

<ul>
<li>they can only have one expression</li>
<li>the only expression is what is returned (non explicit return is required)</li>
</ul>


<p>Let&rsquo;s use examples to show how to use a lambda.</p>

<p><code>python
nums = [1,2,3,4,5,6,7,8,9,10]
print(filter(lambda x: x % 3 == 0, nums))
</code></p>

<p>This will print &ldquo;[3, 6, 9]&rdquo;. The lambda passed to the filter function dictates
the criteria is used to filter numbers. You can achieve the same effect using a
plain old function but it looks a bit clumsier.</p>

<p><code>python
nums = [1,2,3,4,5,6,7,8,9,10]
def multiples_of_3(x):
  return x % 3 == 0
print(filter(multiples_of_3, nums))
</code></p>

<h2>Conclusion</h2>

<p>Hopefully I&rsquo;ve shown Python&rsquo;s take of closures and lambdas. They are not as
powerful as their counterparts in pure functional languages but if they are used
right they are quite convienent.</p>
]]></content>
  </entry>
  
</feed>
