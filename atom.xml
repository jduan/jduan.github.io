<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Furious Programming]]></title>
  <link href="http://jduan.github.io/atom.xml" rel="self"/>
  <link href="http://jduan.github.io/"/>
  <updated>2015-01-03T23:59:25-08:00</updated>
  <id>http://jduan.github.io/</id>
  <author>
    <name><![CDATA[Jingjing Duan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Closures in Python]]></title>
    <link href="http://jduan.github.io/blog/2015/01/03/closures-in-python/"/>
    <updated>2015-01-03T23:05:52-08:00</updated>
    <id>http://jduan.github.io/blog/2015/01/03/closures-in-python</id>
    <content type="html"><![CDATA[<p>Functional languages have a concept of closure, which is a function that closes
its enclosing environment. In other words, a function can access not only its
local variables, but also the non-local variables (aka free variables) of its
enclosing functions.</p>

<p>Python has support for closures but has its weakness and tweaks.</p>

<!-- more -->


<h2>Functions are lexically scoped</h2>

<p>An exmaple shows how lexical scope works.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">outer</span><span class="p">():</span>
</span><span class='line'>  <span class="n">name</span> <span class="o">=</span> <span class="s">&#39;John&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;name is </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">inner</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># invoke outer</span>
</span><span class='line'><span class="n">outer</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code should print &ldquo;name is John&rdquo;. The inner function can &ldquo;access&rdquo; the free
variable &ldquo;name&rdquo; defined in the outer function.</p>

<h2>Closures in Python are weak</h2>

<p>You can only &ldquo;read&rdquo; free variables but you can&rsquo;t &ldquo;change&rdquo; them. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">make_counter</span><span class="p">():</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">counter</span><span class="p">():</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c">##Error, x not defined</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">counter</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="n">make_counter</span><span class="p">();</span>
</span><span class='line'><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will see an error of &ldquo;UnboundLocalError: local variable &lsquo;x&rsquo; referenced
before assignment&rdquo;. This is allowed in languages like Javascript.</p>

<p>There is a workaround though. You can use an object instead of a primitive if
you want to &ldquo;change&rdquo; free variables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">make_counter</span><span class="p">():</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;count&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">counter</span><span class="p">():</span>
</span><span class='line'>    <span class="n">x</span><span class="p">[</span><span class="s">&#39;count&#39;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;count&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">counter</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="n">make_counter</span><span class="p">();</span>
</span><span class='line'><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above should work without any compilation errors. It doesn&rsquo;t look
pretty though.</p>

<p>The good news is Python 3 has better support for this. You can use the
&ldquo;non-local&rdquo; keyword to tag a variable. That way you can change it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">make_counter</span><span class="p">():</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">counter</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># this works only in Python 3</span>
</span><span class='line'>    <span class="n">nonlocal</span> <span class="n">x</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">counter</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="n">make_counter</span><span class="p">();</span>
</span><span class='line'><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What is a lambda?</h2>

<p>In functional languages, lambdas are like synonym of closures. However, in
python lambdas specifically mean &ldquo;anonymous functions&rdquo;. Anything you can do with
a lambda can be done with a function. Lambdas are easier to use when working
with higher-order functions.</p>

<p>Lambdas are like functions but with limitations:</p>

<ul>
<li>they can only have one expression</li>
<li>the only expression is what is returned (non explicit return is required)</li>
</ul>


<p>Let&rsquo;s use examples to show how to use a lambda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">nums</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will print &ldquo;[3, 6, 9]&rdquo;. The lambda passed to the filter function dictates
the criteria is used to filter numbers. You can achieve the same effect using a
plain old function but it looks a bit clumsier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="k">def</span> <span class="nf">multiples_of_3</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">multiples_of_3</span><span class="p">,</span> <span class="n">nums</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Hopefully I&rsquo;ve shown Python&rsquo;s take of closures and lambdas. They are not as
powerful as their counterparts in pure functional languages but if they are used
right they are quite convienent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Beautiful Aspect of Immutable Data Structures]]></title>
    <link href="http://jduan.github.io/blog/2013/12/16/one-beautiful-aspect-of-immutable-data-structures/"/>
    <updated>2013-12-16T22:22:41-08:00</updated>
    <id>http://jduan.github.io/blog/2013/12/16/one-beautiful-aspect-of-immutable-data-structures</id>
    <content type="html"><![CDATA[<p>I stumbled upon this <a href="http://www.careercup.com/question?id=5361917182869504">interview question</a> the other day.
It&rsquo;s not particularly difficult. However, I started appreciating immutable data
structures more after actually coding up a solution.</p>

<!-- more -->


<p>First, I tried to code it up in my favorite language, Ruby. Here&rsquo;s the solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">num_list</span> <span class="o">=</span> <span class="o">[</span><span class="n">arr</span><span class="o">]</span>
</span><span class='line'>  <span class="n">find_recur</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">num_list</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_recur</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">num_list</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num_list</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="n">arr</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;found numbers&quot;</span>
</span><span class='line'>    <span class="n">num_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">l</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">new_arr</span> <span class="o">=</span> <span class="n">shift_array</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr0</span> <span class="o">=</span> <span class="n">add_to_array</span><span class="p">(</span><span class="n">new_arr</span><span class="p">,</span> <span class="s2">&quot;0&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arr1</span> <span class="o">=</span> <span class="n">add_to_array</span><span class="p">(</span><span class="n">new_arr</span><span class="p">,</span> <span class="s2">&quot;1&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">num_list</span><span class="o">.</span><span class="n">member?</span> <span class="n">arr0</span>
</span><span class='line'>    <span class="n">find_recur</span><span class="p">(</span><span class="n">arr0</span><span class="p">,</span> <span class="n">add_to_array</span><span class="p">(</span><span class="n">num_list</span><span class="p">,</span> <span class="n">arr0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">num_list</span><span class="o">.</span><span class="n">member?</span> <span class="n">arr1</span>
</span><span class='line'>    <span class="n">find_recur</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">add_to_array</span><span class="p">(</span><span class="n">num_list</span><span class="p">,</span> <span class="n">arr1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">add_to_array</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">dup</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>  <span class="nb">dup</span><span class="o">.</span><span class="n">push</span> <span class="n">element</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">shift_array</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">dup</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>  <span class="nb">dup</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">dup</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pad</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;0&quot;</span> <span class="o">*</span> <span class="p">(</span><span class="n">size</span> <span class="o">-</span> <span class="n">str</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="o">+</span> <span class="n">str</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="n">N</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="n">N</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">arr</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">//</span><span class="p">)</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the consecutive bits found:</p>

<pre><code>5 bits: ["0", "0", "0", "0", "0"]
5 bits: ["0", "0", "0", "0", "1"]
5 bits: ["0", "0", "0", "1", "0"]
5 bits: ["0", "0", "1", "0", "0"]
5 bits: ["0", "1", "0", "0", "0"]
5 bits: ["1", "0", "0", "0", "1"]
5 bits: ["0", "0", "0", "1", "1"]
5 bits: ["0", "0", "1", "1", "0"]
5 bits: ["0", "1", "1", "0", "0"]
5 bits: ["1", "1", "0", "0", "1"]
5 bits: ["1", "0", "0", "1", "0"]
5 bits: ["0", "0", "1", "0", "1"]
5 bits: ["0", "1", "0", "1", "0"]
5 bits: ["1", "0", "1", "0", "0"]
5 bits: ["0", "1", "0", "0", "1"]
5 bits: ["1", "0", "0", "1", "1"]
5 bits: ["0", "0", "1", "1", "1"]
5 bits: ["0", "1", "1", "1", "0"]
5 bits: ["1", "1", "1", "0", "1"]
5 bits: ["1", "1", "0", "1", "0"]
5 bits: ["1", "0", "1", "0", "1"]
5 bits: ["0", "1", "0", "1", "1"]
5 bits: ["1", "0", "1", "1", "0"]
5 bits: ["0", "1", "1", "0", "1"]
5 bits: ["1", "1", "0", "1", "1"]
5 bits: ["1", "0", "1", "1", "1"]
5 bits: ["0", "1", "1", "1", "1"]
5 bits: ["1", "1", "1", "1", "1"]
5 bits: ["1", "1", "1", "1", "0"]
5 bits: ["1", "1", "1", "0", "0"]
5 bits: ["1", "1", "0", "0", "0"]
5 bits: ["1", "0", "0", "0", "0"]
</code></pre>

<p>This code works. However, I have to make copies of arrays when building new
arrays. (methods: <em>add_to_array</em> and <em>shift_array</em>)</p>

<p>Then I tried to code it up in Ruby with the help of
<a href="https://github.com/harukizaemon/hamster">Hamster</a> this time. Hamster is a
collection of immutable data structures written in ruby as a gem.</p>

<p>Here&rsquo;s the new code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;hamster&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">num_list</span> <span class="o">=</span> <span class="no">Hamster</span><span class="o">.</span><span class="n">list</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">find_recur</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">num_list</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># arr is the current number</span>
</span><span class='line'><span class="c1"># num_list is the numbers found so far</span>
</span><span class='line'><span class="c1"># Note: we are using immutable data structures here. Otherwise, we have to</span>
</span><span class='line'><span class="c1"># create copies of arrays when modifying arr and num_list.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">find_recur</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">num_list</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num_list</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="n">arr</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;found numbers&quot;</span>
</span><span class='line'>    <span class="n">num_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">l</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">l</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">arr0</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="no">Hamster</span><span class="o">.</span><span class="n">list</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">arr1</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="no">Hamster</span><span class="o">.</span><span class="n">list</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">num_list</span><span class="o">.</span><span class="n">member?</span> <span class="n">arr0</span>
</span><span class='line'>    <span class="n">find_recur</span><span class="p">(</span><span class="n">arr0</span><span class="p">,</span> <span class="n">num_list</span><span class="o">.</span><span class="n">cons</span><span class="p">(</span><span class="n">arr0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">unless</span> <span class="n">num_list</span><span class="o">.</span><span class="n">member?</span> <span class="n">arr1</span>
</span><span class='line'>    <span class="n">find_recur</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">num_list</span><span class="o">.</span><span class="n">cons</span><span class="p">(</span><span class="n">arr1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Prefix &quot;0&quot; to a str given the total size.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pad</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;0&quot;</span> <span class="o">*</span> <span class="p">(</span><span class="n">size</span> <span class="o">-</span> <span class="n">str</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="o">+</span> <span class="n">str</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="n">N</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="n">N</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">arr</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">//</span><span class="p">)</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="no">Hamster</span><span class="o">.</span><span class="n">list</span><span class="p">(</span><span class="o">*</span><span class="n">arr</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the code is much simpler. Instead of doing defensive copies of
arrays, I simply do <strong>arr.tail.append(Hamster.list(&ldquo;0&rdquo;))</strong>. New arrays are
created and old arrays are preserved. The recursive calls can use the new arrays
freely, including &ldquo;updating&rdquo; them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tcpdump on Localhost]]></title>
    <link href="http://jduan.github.io/blog/2013/12/15/tcpdump-on-localhost/"/>
    <updated>2013-12-15T15:03:14-08:00</updated>
    <id>http://jduan.github.io/blog/2013/12/15/tcpdump-on-localhost</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Tcpdump">tcpdump</a> is a powerful tool that allows
you to capture TCP/IP traffic over a network. It can be too smart sometimes.
Here&rsquo;s a story of how I got baffled about tcpdump.</p>

<!-- more -->


<p>I was debugging some weird behavior of a production service and thought I&rsquo;d
bring up a local instance of the service, do a tcpdump, and see what&rsquo;s going on.</p>

<p>I made sure I only had one Internet interface running (en0). I started tcpdump
capturing traffic on that interface: <code>tcpdump -i en0 port 8080</code>. Then I pointed
a local client to talk to it by specifying the IP of the service as
<strong>10.30.0.86</strong> which is the internal IP of my laptop.</p>

<p>Fired up the client and it was talking to the local service. I saw logs on both
ends which confirms they were talking to each other. However, surprisingly, I
didn&rsquo;t see anything on the tcpdump console.</p>

<p>I&rsquo;m not a tcpdump expert, so I fired up <a href="http://www.wireshark.org/">Wireshark</a>
and then ran the client again. Applied a Wireshark filter that only lists
traffic between 10.30.0.86 and 10.30.0.86. Not so surprisingly, Wireshark
displayed no traffic as well.</p>

<p>So what&rsquo;s going on? tcpdump and wireshark haven&rsquo;t failed me much in the past. So
I trust them. Why are they not working this time?</p>

<p>Fortunately, my team has a linux guy who knows about linux networking well. His
theory was that the TCP/IP stack of Mac is trying to be smart about
local IPs. If it detects both the client and the server are running on
the same local host, it would use the <strong>loopback</strong> interface (ie lo0)
which apparently is faster than a real IP for some reason.</p>

<p>So I tried again and this time I asked tcpdump to capture traffic on <strong>lo0</strong>.
Magically, tcpdump started spitting out logs on the console.</p>

<p>Lesson learned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug CORS on Opera 12]]></title>
    <link href="http://jduan.github.io/blog/2013/12/15/debug-cors-on-opera-12/"/>
    <updated>2013-12-15T13:59:46-08:00</updated>
    <id>http://jduan.github.io/blog/2013/12/15/debug-cors-on-opera-12</id>
    <content type="html"><![CDATA[<p>Today, I encountered a strange problem with <a href="www.w3.org/TR/cors/">CORS</a>
(cross-origin resource sharing) on Opera 12. (we have been porting our
JS application to work on a device that runs Opera 12)</p>

<p>We have a central Authentication service that authenticates users
and this application is one of the clients. The symptom is when this
application talks to the Authentication service (via a POST request) it
keeps getting a zero HTTP status code. In generally, when a browser returns a
zero status code, it means the browser cancelled the request for some reason.</p>

<!-- more -->


<p>Why could Opera cancel a request to the Authentication service? (Note
that our application works fine on Chrome). Upon reading docs of CORS, I
realize that certain CORS requests (say POST) require a <strong>preflight</strong> request
before actually issuing the real request. Maybe it is this &ldquo;preflight&rdquo;
request that keeps failing and it prevents Opera from issuing a real
POST request?</p>

<p>To see the traffic between the application and the Authentication service, I ran
a &ldquo;nodejs proxy&rdquo; between them which simply logs all the requests and responses.
The logs confirm that Opera only sends a preflight request but doesn&rsquo;t send a
real POST request.</p>

<p>Why? Is it possible that the Authentication service doesn&rsquo;t implement the CORS
standard properly? Let&rsquo;s check the related headers. The following are the
response headers related to CORS:</p>

<ul>
<li>Access-Control-Allow-Origin</li>
<li>Access-Control-Max-Age</li>
<li>Access-Control-Allow-Credentials</li>
<li>Access-Control-Allow-Methods</li>
<li>Access-Control-Allow-Headers</li>
</ul>


<p>The Authentication service returns the following headers:</p>

<ul>
<li>Access-Control-Allow-Origin: the-origin-of-our-app</li>
<li>Access-Control-Max-Age: this header isn&rsquo;t set</li>
<li>Access-Control-Allow-Credentials: true</li>
<li>Access-Control-Allow-Methods: POST, GET, OPTIONS</li>
<li>Access-Control-Allow-Headers: a lot of headers including Authentication</li>
</ul>


<p>It seems all the headers make sense. Why does our app work on Chrome, but not
Opera? Eventually the HTTP status code for the preflight request caught my eyes.
The Authentication service returns <strong>204</strong> for the preflight request. Accordingly to
HTTP standard, <strong>2xx</strong> codes generally mean success. <strong>However, all previous versions
of the CORS standard (<a href="http://www.w3.org/TR/cors/">http://www.w3.org/TR/cors/</a>) except the latest (12/05/2013)
mandate only 200 means success.</strong> In other words, 204 would mean a failure, which
is why Opera believes the preflight request failed and refuses to send a real
POST request.</p>

<p>Opera is obviously still complying with the previous versions of the
CORS standard, which is reasonable considering the latest version of the CORS
standard only came out a few days ago. It takes time to catch up with
the ever-evolving CORS standard.</p>

<p>Chrome, on the other hand, seems to treat any 2xx codes as success. Either they
are extremely up to date or they&rsquo;ve always treated 2xx codes as success.</p>

<p>The moral of the story is the specs of a standard is every important and
contains pretty much everything you need. Read it carefully.</p>
]]></content>
  </entry>
  
</feed>
